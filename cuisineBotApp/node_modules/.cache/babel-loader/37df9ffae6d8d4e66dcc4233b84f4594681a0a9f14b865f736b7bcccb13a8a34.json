{"ast":null,"code":"// allRecipes.js\n\nimport { italianRecipes } from './italianRecipes.js';\nimport { middleEasternRecipes } from './middleEasternRecipes.js';\nimport { spanishRecipes } from './spanishRecipes.js';\nimport { frenchRecipes } from './frenchRecipes.js';\nimport { latinRecipes } from './latinRecipes.js';\nimport { translateRecipes, getCurrentLanguage } from '../translations/translationUtils.js';\n\n// Combine all recipes into one array\nexport const allRecipes = [...italianRecipes, ...middleEasternRecipes, ...spanishRecipes, ...frenchRecipes, ...latinRecipes];\n\n// Function to get recipes in the current language\nexport const getRecipesInCurrentLanguage = () => {\n  const currentLanguage = getCurrentLanguage();\n  return translateRecipes(allRecipes, currentLanguage);\n};\n\n// Helper functions for filtering recipes\nexport const getRecipesByCuisine = cuisine => {\n  return allRecipes.filter(recipe => recipe.cuisine === cuisine);\n};\nexport const getRecipesByDishType = dishType => {\n  return allRecipes.filter(recipe => recipe.dishType === dishType);\n};\nexport const getRecipesByDietaryOption = dietaryOption => {\n  return allRecipes.filter(recipe => recipe.dietaryOptions && recipe.dietaryOptions.includes(dietaryOption));\n};\nexport const getRecipesByDifficulty = difficulty => {\n  return allRecipes.filter(recipe => recipe.difficulty === difficulty);\n};\nexport const searchRecipes = searchTerm => {\n  const term = searchTerm.toLowerCase();\n  return allRecipes.filter(recipe => recipe.name.toLowerCase().includes(term) || recipe.tags.some(tag => tag.toLowerCase().includes(term)) || recipe.ingredients.some(ingredient => ingredient.toLowerCase().includes(term)));\n};\n\n// Get unique values for filters\nexport const getAllCuisines = () => {\n  return [...new Set(allRecipes.map(recipe => recipe.cuisine))];\n};\nexport const getAllDishTypes = () => {\n  return [...new Set(allRecipes.map(recipe => recipe.dishType))];\n};\nexport const getAllDietaryOptions = () => {\n  const allOptions = allRecipes.flatMap(recipe => recipe.dietaryOptions || []);\n  return [...new Set(allOptions)];\n};\nexport const getAllDifficulties = () => {\n  return [...new Set(allRecipes.map(recipe => recipe.difficulty))];\n};\nexport const getAllTags = () => {\n  const allTags = allRecipes.flatMap(recipe => recipe.tags || []);\n  return [...new Set(allTags)];\n};","map":{"version":3,"names":["italianRecipes","middleEasternRecipes","spanishRecipes","frenchRecipes","latinRecipes","translateRecipes","getCurrentLanguage","allRecipes","getRecipesInCurrentLanguage","currentLanguage","getRecipesByCuisine","cuisine","filter","recipe","getRecipesByDishType","dishType","getRecipesByDietaryOption","dietaryOption","dietaryOptions","includes","getRecipesByDifficulty","difficulty","searchRecipes","searchTerm","term","toLowerCase","name","tags","some","tag","ingredients","ingredient","getAllCuisines","Set","map","getAllDishTypes","getAllDietaryOptions","allOptions","flatMap","getAllDifficulties","getAllTags","allTags"],"sources":["D:/קורס מפתחי AI/PROJECT AI/FoodAPP/cuisineBotApp/src/data/allRecipes.js"],"sourcesContent":["// allRecipes.js\r\n\r\nimport { italianRecipes } from './italianRecipes.js';\r\nimport { middleEasternRecipes } from './middleEasternRecipes.js';\r\nimport { spanishRecipes } from './spanishRecipes.js';\r\nimport { frenchRecipes } from './frenchRecipes.js';\r\nimport { latinRecipes } from './latinRecipes.js';\r\nimport { translateRecipes, getCurrentLanguage } from '../translations/translationUtils.js';\r\n\r\n// Combine all recipes into one array\r\nexport const allRecipes = [\r\n  ...italianRecipes,\r\n  ...middleEasternRecipes,\r\n  ...spanishRecipes,\r\n  ...frenchRecipes,\r\n  ...latinRecipes\r\n];\r\n\r\n// Function to get recipes in the current language\r\nexport const getRecipesInCurrentLanguage = () => {\r\n  const currentLanguage = getCurrentLanguage();\r\n  return translateRecipes(allRecipes, currentLanguage);\r\n};\r\n\r\n// Helper functions for filtering recipes\r\nexport const getRecipesByCuisine = (cuisine) => {\r\n  return allRecipes.filter(recipe => recipe.cuisine === cuisine);\r\n};\r\n\r\nexport const getRecipesByDishType = (dishType) => {\r\n  return allRecipes.filter(recipe => recipe.dishType === dishType);\r\n};\r\n\r\nexport const getRecipesByDietaryOption = (dietaryOption) => {\r\n  return allRecipes.filter(recipe => \r\n    recipe.dietaryOptions && recipe.dietaryOptions.includes(dietaryOption)\r\n  );\r\n};\r\n\r\nexport const getRecipesByDifficulty = (difficulty) => {\r\n  return allRecipes.filter(recipe => recipe.difficulty === difficulty);\r\n};\r\n\r\nexport const searchRecipes = (searchTerm) => {\r\n  const term = searchTerm.toLowerCase();\r\n  return allRecipes.filter(recipe => \r\n    recipe.name.toLowerCase().includes(term) ||\r\n    recipe.tags.some(tag => tag.toLowerCase().includes(term)) ||\r\n    recipe.ingredients.some(ingredient => ingredient.toLowerCase().includes(term))\r\n  );\r\n};\r\n\r\n// Get unique values for filters\r\nexport const getAllCuisines = () => {\r\n  return [...new Set(allRecipes.map(recipe => recipe.cuisine))];\r\n};\r\n\r\nexport const getAllDishTypes = () => {\r\n  return [...new Set(allRecipes.map(recipe => recipe.dishType))];\r\n};\r\n\r\nexport const getAllDietaryOptions = () => {\r\n  const allOptions = allRecipes.flatMap(recipe => recipe.dietaryOptions || []);\r\n  return [...new Set(allOptions)];\r\n};\r\n\r\nexport const getAllDifficulties = () => {\r\n  return [...new Set(allRecipes.map(recipe => recipe.difficulty))];\r\n};\r\n\r\nexport const getAllTags = () => {\r\n  const allTags = allRecipes.flatMap(recipe => recipe.tags || []);\r\n  return [...new Set(allTags)];\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}